//Cân bằng lại trường hợp 1: Left - Left
void rotateLL(AVLNode*& T)
{
	AVLNode* T1 = T->Left;
	T->Left = T1->Right;
	T1->Right = T;
	switch (T1->balFactor)
	{
	case LH:	//cây T1 lệch trái
		T->balFactor = EH;
		T1->balFactor = EH;
		break;
	case EH:	//cây T1 cân bằng
		T->balFactor = LH;
		T1->balFactor = RH;
		break;
	}
	T = T1;
}
//Cân bằng lại trường hợp 2: Left - Right
void rotateLR(AVLNode*& T)
{
	AVLNode* T1 = T->Left;
	AVLNode* T2 = T1->Right;
	T1->Right = T2->Left;
	T2->Left = T1;
	T->Left = T2->Right;
	T2->Right = T;
	switch (T2->balFactor)
	{
	case LH:
		T->balFactor = RH;
		T1->balFactor = EH;
		break;
	case EH:
		T->balFactor = EH;
		T1->balFactor = EH;
		break;
	case RH:
		T->balFactor = EH;
		T1->balFactor = LH;
		break;
	}
	T2->balFactor = EH;
	T = T2;
}
//Cân bằng lại trường hợp 3: Right - Left
void rotateRL(AVLNode*& T)
{
	AVLNode* T1 = T->Right;
	AVLNode* T2 = T1->Left;
	T1->Left = T2->Right;
	T2->Right = T1;
	T->Right = T2->Left;
	T2->Left = T;
	switch (T2->balFactor)
	{
	case RH:
		T->balFactor = LH;
		T1->balFactor = EH;
		break;
	case EH:
		T->balFactor = EH;
		T1->balFactor = EH;
		break;
	case LH:
		T->balFactor = EH;
		T1->balFactor = RH;
		break;
	}
	T2->balFactor = EH;
	T = T2;
}
//Cân bằng lại trường hợp 4: Right - Right
void rotateRR(AVLNode*& T)
{
	AVLNode* T1 = T->Right;
	T->Right = T1->Left;
	T1->Left = T;
	switch (T1->balFactor)
	{
	case RH://cây T1 lệch phải
		T->balFactor = EH;
		T1->balFactor = EH;
		break;
	case EH://cây T1 cân bằng
		T->balFactor = RH;
		T1->balFactor = LH;
		break;
	}
	T = T1;
}
//Cân bằng lại cây AVL khi bị mất cân bằng
//Cân bằng nhánh trái
int balanceLeft(AVLNode*& T)
{
	//Khi cây T lệnh bên trái
	AVLNode* T1 = T->Left;
	switch (T1->balFactor)
	{
	case LH:
		rotateLL(T);
		return 2;
	case EH:
		rotateLL(T);
		return 1;
	case RH:
		rotateLR(T);
		return 2;
	}
	return 0; //Thực hiện không thành công
}
//Cân bằng nhánh phải
int balanceRight(AVLNode*& T)
{
	AVLNode* T1 = T->Right;
	switch (T1->balFactor)
	{
	case LH:
		rotateRL(T);
		return 2;
	case EH:
		rotateRR(T);
		return 1;
	case RH:
		rotateRR(T);
		return 2;
	}
	return 0; //Thực hiện không thành công
}
int insertAVLNode(AVLNode*& T, AVLNode* p)
{
	//Nếu nút p không tồn tại
	if (p == NULL)
		return -1;
	if (T == NULL)
	{
		T = p;
		return 2;
	}
	int Result;
	if (T->Info == p->Info)
		return 0;//Đã tồn tại nút 
	//Thêm vào nhánh trái
	if (T->Info > p->Info)
	{
		Result = insertAVLNode(T->Left, p);
		if (Result < 2)
			return Result;
		switch (T->balFactor)
		{
		case RH:
			T->balFactor = EH;
			return 1;
		case EH:
			T->balFactor = LH;
			return 2;
		case LH:
			balanceLeft(T);
			return 1;
		}
	}
	//Thêm vào nhánh phải
	else
	{
		Result = insertAVLNode(T->Right, p);
		if (Result < 2)
			return Result;
		switch (T->balFactor)
		{
		case LH:
			T->balFactor = EH;
			return 1;
		case EH:
			T->balFactor = RH;
			return 2;
		case RH:
			balanceRight(T);
			return 1;
		}
	}
}
